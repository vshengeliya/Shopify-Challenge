{"version":3,"sources":["Components/Header.js","Components/Search.js","Components/MovieCard.js","Containers/MovieContainer.js","Containers/ResultContainer.js","App.js","index.js"],"names":["Header","Search","props","placeholder","value","searchValue","onChange","searchHandler","MovieCard","button","clickHandler","appClickHandler","movie","nominated","type","className","onClick","removeClickHandler","disabled","Title","Year","MovieWrapper","styled","div","Movies","MovieContainer","tooManyResults","page","changePage","movieObject","undefined","map","key","imdbID","updatedMovies","renderMovie","filter","ResultsWrapper","SearchWrapper","ResultContainer","state","nominatedMovies","isMax","renderBanner","e","target","innerText","setState","alert","movie_object","length","previousArray","newArray","array","concat","uniqArray","Set","find","obj","renderDisplayBanner","showBanner","prevProps","prevState","this","fetch","process","then","resp","json","data","Error","getNominatedMovies","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b609e01.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(){\n\n    return (\n        <h2> The Shoppies</h2>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction Search(props){\n\n    return(\n        <div>\n            <form>\n                <input placeholder=\"search movie\" value={props.searchValue} onChange={props.searchHandler}/>\n            </form>\n        </div>\n    )\n}\n\nexport default Search","import React from 'react';\n\n\nfunction MovieCard (props){\n    \n    const clickHandler=()=>{\n\n        props.appClickHandler(props.movie)\n    };\n\n    const removeClickHandler=()=>{\n\n        props.removeClickHandler(props.movie)\n    };\n\n    let button;\n    if (props.movie.nominated && props.nominated){\n        button = <button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick = {removeClickHandler}>remove</button>\n    } else if(props.movie.nominated){\n        button = <button type=\"button\" className=\"btn btn-primary btn-sm\" disabled onClick = {clickHandler}>nominated</button>\n    } else {\n        button = <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick = {clickHandler}>nominate</button>\n    };\n\n    return (\n        <>\n            <div>*{props.movie.Title}({props.movie.Year})</div> \n            {button}\n        </> \n        );\n};\n\nexport default MovieCard","import React from 'react';\nimport styled from 'styled-components'\nimport MovieCard from '../Components/MovieCard'\nimport \"../ResultContainer.css\";\n\nconst MovieWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n`\n\nconst Movies = styled.div`\n    border: 1px solid gray;\n    border-radius: 6px;\n    padding: 8px;\n    width: 45%;\n    height: 50vh;\n    overflow: scroll;\n`\n\nfunction MovieContainer (props) {\n\n    const renderMovie = () => {\n\n        if (props.movieObject !== null && props.movieObject !== undefined){\n            return props.movieObject.map((movie)=> \n            < MovieCard movie={movie} key={movie.imdbID} \n            appClickHandler={props.appClickHandler} \n            updatedMovies={props.updatedMovies}\n            />);\n        };\n    };\n\n    const renderNominatedMovies = () => {\n  \n       let newArray = props.updatedMovies.filter(movie=> {\n            return movie.nominated === true});\n                \n        let newResult = newArray.map(movie => < MovieCard movie={movie} key={movie.imdbID} \n            removeClickHandler={props.removeClickHandler} nominated={true} />);\n        return newResult;\n    } \n\n\n        return(\n            <MovieWrapper>\n                <Movies> \n                    {<h6>{props.tooManyResults ? 'Too many results - please refine search...' : `Results for \"${props.movie}\"`}</h6>}\n                    <p>page {props.page}</p>\n                    <button type=\"button\" className=\"btn btn-light btn-sm\" onClick={props.changePage}>back</button>\n                    <button type=\"button\" className=\"btn btn-light btn-sm\" onClick={props.changePage}>forward</button>\n                    {renderMovie()}\n                </Movies>\n                <Movies> \n                    <h6>Nominations</h6>\n                    {renderNominatedMovies()} \n                </Movies>\n            </MovieWrapper>    \n        );\n};\n\nexport default MovieContainer","import React from 'react';\nimport styled from 'styled-components'\nimport Search from '../Components/Search'\nimport MovieContainer from '../Containers/MovieContainer';\nimport Banner from 'react-js-banner';\n\nconst ResultsWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    border: 1px solid blue;\n    height: auto;\n    justify-content: center;\n    align-items: center;\n`\n\nconst SearchWrapper = styled.div`\n    width: 100%;\n    border: 1px solid gray;\n    border-radius: 6px;\n    padding: 8px;\n`\n\nclass ResultContainer extends React.Component {\n\n    state = {\n        movie: \"\",\n        movieObject: null,\n        page: 1,\n        updatedMovies: [],\n        nominatedMovies: null,\n        isMax: false,\n        renderBanner: false,\n        tooManyResults: false\n    };\n\n    componentDidUpdate(prevProps, prevState){\n\n        if (this.state.movie !== prevState.movie  || this.state.page !== prevState.page){\n            fetch(`https://www.omdbapi.com/?s=${this.state.movie}&page=${this.state.page}&apikey=${process.env.REACT_APP_API_KEY}`)\n            .then(resp => resp.json())\n            .then(data => {\n                if (data.Error === 'Too many results.') {\n                    this.setState({ tooManyResults: true })\n                } else {\n                    this.setState({movieObject: data.Search, tooManyResults: false })\n                }\n            });\n        };\n    };\n\n    changePage = (e) => {\n        if (e.target.innerText === 'forward'){\n            this.setState({page: this.state.page+1})\n        } else if ( this.state.page === 0){\n                return alert(\"please move forward to see search result\")\n        } else {\n                this.setState({page: this.state.page-1})\n        };\n    };\n\n    searchHandler=(e)=>{\n        this.setState({movie:e.target.value})\n    };\n\n    appClickHandler=(movie_object)=>{\n\n        let nominatedMovies = this.state.updatedMovies.filter(movie => movie.nominated === true) \n        if (nominatedMovies.length > 4){\n            this.setState({renderBanner: true});\n        } else {\n\n            let previousArray = [...this.state.updatedMovies]\n            let newArray = [...this.state.movieObject]\n            let array = previousArray.concat(newArray)\n            let uniqArray = [...new Set (array)]\n            let filteredObj = newArray.find((obj)=> obj=== movie_object)\n            filteredObj.nominated = true\n            this.setState({updatedMovies:uniqArray}) \n        };\n    };\n\n    removeClickHandler=(movie_object)=>{\n\n        let newArray = [...this.state.updatedMovies]\n        let filteredObj = newArray.find((obj)=> obj=== movie_object)\n        filteredObj.nominated = false\n        this.setState({updatedMovies:newArray}) \n        this.setState({renderBanner: false})\n    };\n\n    renderDisplayBanner = () => (\n        <Banner showBanner={true}>\n            <div>\n              <h4>You've nominated all 5 movies, to change the selection, please remove a movie</h4>\n            </div>\n        </Banner>\n    );\n\n    render() { \n\n        return(\n            <ResultsWrapper>  \n            { this.state.renderBanner ? this.renderDisplayBanner() : null }\n             <SearchWrapper>\n                 <h3>Movie Title</h3>\n                 <Search searchHandler={this.searchHandler} searchValue={this.state.movie}/>\n             </SearchWrapper>\n             <MovieContainer \n                 movie={this.state.movie}\n                 movieObject={this.state.movieObject}\n                 getNominatedMovies={this.getNominatedMovies}\n                 appClickHandler ={this.appClickHandler}\n                 updatedMovies={this.state.updatedMovies}\n                 removeClickHandler={this.removeClickHandler}\n                 tooManyResults={this.state.tooManyResults}\n                 changePage={this.changePage}\n                 page={this.state.page}\n             />\n            </ResultsWrapper>\n        );\n    };\n};\n\nexport default ResultContainer\n","import React from 'react';\nimport Header from './Components/Header'\nimport ResultContainer from './Containers/ResultContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <ResultContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}